<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lswd.youpin.dao.lsyp.RecipeOrderMapper">
    <resultMap id="BaseResultMap" type="com.lswd.youpin.model.lsyp.RecipeOrder">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <result column="id" jdbcType="INTEGER" property="id" />
        <result column="order_id" jdbcType="VARCHAR" property="orderId" />
        <result column="canteen_id" jdbcType="INTEGER" property="canteenId" />
        <result column="associator_id" jdbcType="VARCHAR" property="associatorId" />
        <result column="pay_type" jdbcType="SMALLINT" property="payType" />
        <result column="pay" jdbcType="VARCHAR" property="pay" />
        <result column="payTypeName" jdbcType="VARCHAR" property="payTypeName" />
        <result column="order_amount_all" jdbcType="REAL" property="orderAmount" />
        <result column="pick_type" jdbcType="INTEGER" property="pickType" />
        <result column="pick_name" jdbcType="VARCHAR" property="pickName" />
        <result column="description" jdbcType="VARCHAR" property="description" />
        <result column="eat_time" jdbcType="TIMESTAMP" property="eatTime" />
        <result column="status" jdbcType="SMALLINT" property="status" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
        <result column="unified_id" jdbcType="INTEGER" property="unifiedId" />
        <collection property="recipeOrderItemsList" resultMap="RecipeOderItemMap"/>
    </resultMap>

    <resultMap id="RecipeOderItemMap" type="com.lswd.youpin.model.lsyp.RecipeOrderItems">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="itemId" jdbcType="INTEGER" property="id" />
        <result column="recipe_id" jdbcType="VARCHAR" property="recipeId" />
        <result column="plan_id" jdbcType="VARCHAR" property="planId" />
        <result column="quantity" jdbcType="INTEGER" property="quantity" />
        <result column="order_amount" jdbcType="REAL" property="orderAmount" />
        <association property="recipe" column="rid" javaType="com.lswd.youpin.model.lsyp.Recipe">
            <id column="rid" jdbcType="INTEGER" property="id" />
            <result column="recipe_name" jdbcType="VARCHAR" property="recipeName" />
            <result column="recipeId" jdbcType="VARCHAR" property="recipeId" />
            <result column="recipe_type" jdbcType="VARCHAR" property="recipeType" />
            <result column="imageurl" jdbcType="VARCHAR" property="imageurl" />
        </association>
    </resultMap>

    <resultMap id="SalesRecipeMap" type="com.lswd.youpin.model.lsyp.RecipeStatisricsOrder">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="quantity" jdbcType="INTEGER" property="quantity" />
        <result column="recipe_id" jdbcType="VARCHAR" property="goodId" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="canteen_id" jdbcType="VARCHAR" property="canteenId" />
        <result column="imageurl" jdbcType="VARCHAR" property="imageurl" />
        <result column="price" jdbcType="REAL" property="price" />
    </resultMap>
    <select id="selectOrderTmpCount" resultType="java.lang.Integer" >
        select COUNT(DISTINCT order_id) from t_recipe_order_tmp where 1=1 AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        <if test="payType!=null"> AND pay_type=#{payType,jdbcType=INTEGER}</if>
        <if test="keyword!=''">and order_id like #{keyword}</if>
        <if test="dataTime!=null and dataTime!=0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= #{dataTime}
        </if>
        <if test="dataTime==null or dataTime==0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= 7
        </if>
    </select>


    <select id="selectOrderTmpAll" resultMap="BaseResultMap" >
       select order_id,associator_id,pick_type,order_amount as order_amount_all,`status`,canteen_id,description,create_time
       from t_recipe_order_tmp where 1=1 AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        <if test="payType!=null"> AND pay_type=#{payType,jdbcType=INTEGER}</if>
        <if test="keyword!=''">and order_id like #{keyword}</if>
        <if test="dataTime!=null and dataTime!=0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= #{dataTime}
        </if>
        <if test="dataTime==null or dataTime==0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= 7
        </if>
        ORDER BY eat_time DESC ,create_time DESC limit #{offSet},#{pageSize}
    </select>



    <select id="selectPaidCount" resultType="java.lang.Integer">
        select COUNT(DISTINCT order_id) from t_recipe_order_paid where 1=1 AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        <if test="payType!=null"> AND pay_type=#{payType,jdbcType=INTEGER}</if>
        <if test="keyword!=''">and order_id like #{keyword}</if>
        <if test="dataTime!=null and dataTime!=0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= #{dataTime}
        </if>
        <if test="dataTime==null or dataTime==0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= 7
        </if>
    </select>

    <select id="selectPaidAll" resultMap="BaseResultMap">
       select order_id,associator_id,pick_type,order_amount as order_amount_all,`status`,canteen_id,description,create_time
       from t_recipe_order_paid where 1=1 AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        <if test="payType!=null"> AND pay_type=#{payType,jdbcType=INTEGER}</if>
        <if test="keyword!=''">and order_id like #{keyword}</if>
        <if test="dataTime!=null and dataTime!=0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= #{dataTime}
        </if>
        <if test="dataTime==null or dataTime==0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= 7
        </if>
        ORDER BY eat_time DESC ,create_time DESC limit #{offSet},#{pageSize}
    </select>

    <select id="selectOverCount" resultType="java.lang.Integer">
        select COUNT(DISTINCT order_id)from t_recipe_order_over where 1=1 AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        <if test="payType!=null"> AND pay_type=#{payType,jdbcType=INTEGER}</if>
        <if test="keyword!=''">and order_id like #{keyword}</if>
        <if test="dataTime!=null and dataTime!=0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= #{dataTime}
        </if>
        <if test="dataTime==null or dataTime==0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= 7
        </if>
    </select>

    <select id="selectOverAll" resultMap="BaseResultMap">
       select order_id,associator_id,pick_type,order_amount as order_amount_all,`status`,canteen_id,description,create_time
       from t_recipe_order_over where 1=1 AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        <if test="payType!=null"> AND pay_type=#{payType,jdbcType=INTEGER}</if>
        <if test="keyword!=''">and order_id like #{keyword}</if>
        <if test="dataTime!=null and dataTime!=0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= #{dataTime}
        </if>
        <if test="dataTime==null or dataTime==0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= 7
        </if>
        ORDER BY eat_time DESC ,create_time DESC limit #{offSet},#{pageSize}
    </select>

    <select id="selectRefundCount" resultType="java.lang.Integer">
        select COUNT(DISTINCT order_id) from recipeOrderExit where 1=1 AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        <if test="payType!=null"> AND pay_type=#{payType,jdbcType=INTEGER}</if>
        <if test="keyword!=''">and order_id like #{keyword}</if>
        <if test="dataTime!=null and dataTime!=0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= #{dataTime}
        </if>
        <if test="dataTime==null or dataTime==0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= 7
        </if>
    </select>
    <select id="selectRefundAll" resultMap="BaseResultMap">
        select order_id,associator_id,pick_type,order_amount as order_amount_all,`status`,canteen_id,description,create_time
        from recipeOrderExit where 1=1 AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        <if test="payType!=null"> AND pay_type=#{payType,jdbcType=INTEGER}</if>
        <if test="keyword!=''">and order_id like #{keyword}</if>
        <if test="dataTime!=null and dataTime!=0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= #{dataTime}
        </if>
        <if test="dataTime==null or dataTime==0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= 7
        </if>
         ORDER BY eat_time DESC ,create_time DESC  limit #{offSet},#{pageSize}

    </select>
    <select id="selectOrdersCount" resultType="java.lang.Integer">
        select COUNT(DISTINCT order_id) from recipeOrderAll where 1=1 AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        <if test="payType!=null"> AND pay_type=#{payType,jdbcType=INTEGER}</if>
        <if test="keyword!=''">and order_id like #{keyword}</if>
        <if test="dataTime!=null and dataTime!=0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= #{dataTime}
        </if>
        <if test="dataTime==null or dataTime==0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= 7
        </if>

    </select>

    <select id="selectOrdersAll" resultMap="BaseResultMap">
        select order_id,associator_id,pick_type,order_amount as order_amount_all,`status`,canteen_id,description,create_time
        from recipeOrderAll where 1=1 AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        <if test="payType!=null"> AND pay_type=#{payType,jdbcType=INTEGER}</if>
        <if test="keyword!=''">and order_id like #{keyword}</if>
        <if test="dataTime!=null and dataTime!=0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= #{dataTime}
        </if>
        <if test="dataTime==null or dataTime==0">
            AND TO_DAYS(NOW()) - TO_DAYS(eat_time) &lt;= 7
        </if>
        ORDER BY eat_time DESC ,create_time DESC  limit #{offSet},#{pageSize}
    </select>

    <insert id="insertOrder" parameterType="com.lswd.youpin.model.lsyp.RecipeOrder">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into t_recipe_order_tmp (order_id,associator_id,eat_time,pick_type,
        order_amount,out_fee,pay_type,canteen_id,description,status,create_time,update_time)
        values ( #{orderId,jdbcType=VARCHAR}, #{associatorId,jdbcType=VARCHAR},
        #{eatTime,jdbcType=TIMESTAMP}, #{pickType,jdbcType=INTEGER},#{orderAmount,jdbcType=DOUBLE},#{outFee,jdbcType=DOUBLE},#{payType,jdbcType=BIT}, #{canteenId,jdbcType=VARCHAR},
        #{description,jdbcType=VARCHAR},#{status,jdbcType=SMALLINT},#{createTime,jdbcType=TIMESTAMP},#{updateTime,jdbcType=TIMESTAMP}
        )
    </insert>

    <select id="selectOrderTmpLast" resultType="java.lang.Integer" >
        select id from t_recipe_order_tmp  GROUP BY id DESC LIMIT 0,1
    </select>

    <select id="getSalesList" resultMap="BaseResultMap">
        select order_id as order_id,canteen_id as canteen_id,associator_id as associator_id,
        eat_time as eat_time,order_amount as order_amount_all,`status` as `status`
        from t_recipe_order_over where eat_time BETWEEN #{startTime,jdbcType=TIMESTAMP}
        and #{endTime,jdbcType=TIMESTAMP} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>

    </select>

    <select id="getSalesRefundList" resultMap="BaseResultMap">
        select order_id as order_id,canteen_id as canteen_id,associator_id as associator_id,
        eat_time as eat_time,order_amount as order_amount_all,`status` as `status`
        from t_recipe_order_refund where eat_time BETWEEN #{startTime,jdbcType=TIMESTAMP}
        and #{endTime,jdbcType=TIMESTAMP} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
    </select>


    <select id="getSalesRecipeList" resultMap="SalesRecipeMap">
       select re.id as id,re.recipe_id as recipe_id,re.canteen_id as canteen_id,SUM(t.quantity) as quantity,re.guide_price as price,re.imageurl as imageurl,re.recipe_name as name
       from t_recipe_order_paid as r INNER JOIN t_recipe_order_items as t on r.order_id =t.order_id
       INNER JOIN t_recipe as re on re.recipe_id=t.recipe_id WHERE  r.eat_time
       BETWEEN #{startTime,jdbcType=TIMESTAMP} and #{endTime,jdbcType=TIMESTAMP} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            r.canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
       GROUP BY t.recipe_id  ORDER BY r.eat_time DESC ,r.create_time DESC limit #{offSet},#{pageSize}
    </select>

    <select id="selectSalesCount" resultType="java.lang.Integer">
       SELECT COUNT(s.id) FROM (select re.id as id from t_recipe_order_paid as r
       INNER JOIN t_recipe_order_items as t on r.order_id =t.order_id
       INNER JOIN t_recipe as re on re.recipe_id=t.recipe_id WHERE  r.eat_time
       BETWEEN #{startTime,jdbcType=TIMESTAMP} and #{endTime,jdbcType=TIMESTAMP} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            r.canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
       GROUP BY t.recipe_id) as s
    </select>

    <!--获取某个菜品品的月销量-->
    <select id="getRecipeMonthSales" resultType="java.lang.Integer">
        SELECT sum(item.quantity) from t_recipe_order_over over INNER JOIN t_recipe_order_items item ON over.order_id = item.order_id
        WHERE over.canteen_id = #{canteenId} AND item.recipe_id = #{recipeId} AND date(create_time) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
    </select>

    <select id="getDanPin" resultType="com.lswd.youpin.model.lsyp.Statistics">
        select SUM(it.quantity) AS 'value',r.recipe_name as 'name'
        from t_recipe_order_over as o INNER JOIN t_recipe_order_items as it on
        it.order_id=o.order_id INNER JOIN t_recipe as r ON r.recipe_id=it.recipe_id
        where o.eat_time BETWEEN #{startTime,jdbcType=TIMESTAMP} and  #{endTime,jdbcType=TIMESTAMP} AND
        <foreach collection="canteenIds" item="can"  separator="OR" open="(" close=")">
            o.canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        GROUP BY it.recipe_id  ORDER BY SUM(it.quantity) DESC LIMIT 0,5
    </select>

    <select id="getSalesOrderCount" resultType="java.lang.Integer">
        SELECT COUNT(id) from t_recipe_order_over  where eat_time BETWEEN #{startTime,jdbcType=TIMESTAMP}
        and  #{endTime,jdbcType=TIMESTAMP} and canteen_id = #{canteenId,jdbcType=VARCHAR}
    </select>

    <select id="getTimeOrder" resultType="java.lang.Integer">
        SELECT COUNT(id) from t_recipe_order_over where eat_time LIKE #{dateTime,jdbcType=VARCHAR} AND
        <foreach collection="canteenIds" item="can"  separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
    </select>
    <select id="getRecipeOrder"  resultMap="BaseResultMap">
        SELECT id,order_id,associator_id,pick_type,eat_time,order_amount as order_amount_all,status,pay_type,canteen_id,description,update_time,create_time,unified_id
        FROM ${table}
        WHERE  order_id =#{orderNo,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByOrderNo">
        delete from   ${table}  where order_id =#{orderNo,jdbcType=VARCHAR}
    </delete>
    <insert id="insertOrderPaid" parameterType="com.lswd.youpin.model.lsyp.RecipeOrder">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into t_recipe_order_paid (order_id,canteen_id,associator_id,pick_type,eat_time,
        order_amount,status,pay_type,description,create_time,update_time,unified_id)
        values ( #{orderId,jdbcType=VARCHAR}, #{canteenId,jdbcType=VARCHAR},#{associatorId,jdbcType=VARCHAR},#{pickType,jdbcType=INTEGER},
        #{eatTime,jdbcType=TIMESTAMP}, #{orderAmount,jdbcType=DOUBLE},#{status,jdbcType=SMALLINT},#{payType,jdbcType=SMALLINT},
        #{description,jdbcType=VARCHAR},#{createTime,jdbcType=TIMESTAMP},#{updateTime,jdbcType=TIMESTAMP},#{unifiedId,jdbcType=INTEGER}
        )
    </insert>

    <select id="selectTempOrder" resultMap="BaseResultMap">
    SELECT tmp.order_id as order_id,tmp.eat_time as eat_time,tmp.order_amount as order_amount_all,tmp.create_time as create_time,
    tmp.associator_id as associator_id,tmp.pick_type as pick_type,CASE tmp.pick_type WHEN 1 THEN '早餐' WHEN 2 THEN '午餐'
    WHEN 3 THEN '晚餐' END as pick_name, tmp.canteen_id as canteen_id,tmp.status as status,tmp.pay_type as pay_type,
    tmp.create_time as create_time,item.id as itemId,item.plan_Id as plan_id,item.recipe_id as recip_id,item.quantity as quantity,
    item.order_amount as order_amount,r.id as rid, r.recipe_id as recipeId,r.imageurl as imageurl,r.recipe_name as recipe_name
    from t_recipe_order_tmp as tmp INNER JOIN t_recipe_order_items as item on item.order_id=tmp.order_id
    INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id WHERE tmp.order_id= #{orderId,jdbcType=VARCHAR}
    </select>

    <select id="selectRefundOrder" resultMap="BaseResultMap">
         SELECT refund.order_id as order_id,refund.eat_time as eat_time,refund.order_amount as order_amount_all,
         refund.pick_type as pick_type,refund.create_time as create_time,
         CASE refund.pick_type WHEN 1 THEN '早餐' WHEN 2 THEN '午餐' WHEN 3 THEN '晚餐' END as pick_name,
         refund.associator_id as associator_id, refund.canteen_id as canteen_id, refund.status as sstatus,
         refund.pay_type as pay_type,refund.create_time as create_time, item.id as itemId,item.plan_Id as plan_id,item.recipe_id as recip_id,
         item.quantity as quantity,item.order_amount as order_amount,r.recipe_id as recipeId, r.id as rid, r.imageurl as imageurl,
         r.recipe_name as recipe_name from recipeOrderExit as refund INNER JOIN t_recipe_order_items as item
         on item.order_id=refund.order_id INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
         WHERE refund.order_id=#{orderId,jdbcType=VARCHAR}
    </select>

    <select id="selectOverOrder" resultMap="BaseResultMap">
        SELECT o.order_id as order_id,o.eat_time as eat_time,o.order_amount as order_amount_all,o.associator_id as associator_id,
        o.pick_type as pick_type, o.create_time as create_time,CASE o.pick_type WHEN 1 THEN '早餐' WHEN 2 THEN '午餐' WHEN 3 THEN '晚餐' END as pick_name,
        o.status as status, o.canteen_id as canteen_id,o.pay_type as pay_type,item.id as itemId,item.quantity as quantity,
        item.order_amount as order_amount,r.id as rid,r.recipe_id as recipeId,o.create_time as create_time,
        r.imageurl as imageurl,r.recipe_name as recipe_name from t_recipe_order_over as o
        INNER JOIN t_recipe_order_items as item on item.order_id=o.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        WHERE o.order_id= #{orderId,jdbcType=VARCHAR} AND  o.status!=0
    </select>

    <select id="selectPaidOrder" resultMap="BaseResultMap">
        SELECT paid.order_id as order_id,paid.eat_time as eat_time,paid.order_amount as order_amount_all,
        paid.associator_id as associator_id,paid.pick_type as pick_type,paid.create_time as create_time,
        CASE paid.pick_type WHEN 1 THEN '早餐' WHEN 2 THEN '午餐' WHEN 3 THEN '晚餐' END as pick_name,
        paid.status as status, paid.canteen_id as canteen_id,paid.pay_type as pay_type,item.id as itemId,item.quantity as quantity,
        item.order_amount as order_amount,r.id as rid,r.recipe_id as recipeId, r.imageurl as imageurl,paid.create_time as create_time,
        r.recipe_name as recipe_name from t_recipe_order_paid as paid INNER JOIN t_recipe_order_items as
        item on item.order_id=paid.order_id INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        WHERE paid.order_id= #{orderId,jdbcType=VARCHAR}
    </select>



    <select id="selectTempOrderListCount" resultType="java.lang.Integer" parameterType="com.lswd.youpin.model.Associator">
        SELECT COUNT(co.id) from (SELECT tmp.id as id from t_recipe_order_tmp as tmp
        INNER JOIN t_recipe_order_items as item on item.order_id=tmp.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        WHERE  tmp.associator_id=#{associatorId,jdbcType=VARCHAR}
        GROUP BY tmp.order_id) AS co
    </select>

    <select id="selectTempOrderList" resultMap="BaseResultMap">
        SELECT tmp.order_id as order_id,tmp.eat_time as eat_time,tmp.order_amount as order_amount_all,
        tmp.status as status,tmp.pay_type as pay_type,tmp.pick_type as pick_type,
        CASE tmp.pick_type WHEN 1 THEN '早餐' WHEN 2 THEN '午餐' WHEN 3 THEN '晚餐' END as pick_name,
        item.id as itemId,item.quantity as quantity,item.order_amount as order_amount,r.id as rid,r.recipe_id as recipeId,
        r.imageurl as imageurl,r.recipe_name as recipe_name from
        (SELECT *FROM t_recipe_order_tmp  WHERE  associator_id= #{associator.associatorId,jdbcType=VARCHAR} limit #{offSet},#{pageSize} )as tmp
        INNER JOIN t_recipe_order_items as item on item.order_id=tmp.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        ORDER BY tmp.eat_time DESC ,tmp.create_time DESC
    </select>

    <select id="selectRefundOrderListCount" resultType="java.lang.Integer" parameterType="com.lswd.youpin.model.Associator">
        SELECT COUNT(co.order_id) from ( SELECT refund.order_id as order_id from t_recipe_order_refund as refund
        INNER JOIN t_recipe_order_items as item on item.order_id=refund.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        WHERE refund.associator_id=#{associatorId,jdbcType=VARCHAR} AND  refund.status!=0
        GROUP BY refund.order_id) AS co
    </select>

    <select id="selectRefundOrderList" resultMap="BaseResultMap">
        SELECT  refund.order_id as order_id,refund.eat_time as eat_time,refund.order_amount as order_amount_all,refund.status as status,
        refund.pick_type as pick_type, CASE refund.pick_type WHEN 1 THEN '早餐' WHEN 2 THEN '午餐' WHEN 3 THEN '晚餐' END as pick_name,
        refund.pay_type as pay_type, item.id as itemId,item.quantity as quantity,item.order_amount as order_amount,r.id as rid,r.recipe_id as recipeId,
        r.imageurl as imageurl,r.recipe_name as recipe_name from
        (SELECT *FROM t_recipe_order_refund  WHERE associator_id= #{associator.associatorId,jdbcType=VARCHAR}  AND  status!=0 limit #{offSet},#{pageSize})
        as refund INNER JOIN t_recipe_order_items as item on item.order_id=refund.order_id INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        ORDER BY refund.eat_time DESC ,refund.create_time DESC
    </select>

    <select id="selectCanclOrderListCount" resultType="java.lang.Integer" parameterType="com.lswd.youpin.model.Associator">
        SELECT COUNT(co.order_id) from ( SELECT refund.order_id as order_id from t_recipe_order_cancel as refund
        INNER JOIN t_recipe_order_items as item on item.order_id=refund.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        WHERE refund.associator_id=#{associatorId,jdbcType=VARCHAR} AND  refund.status!=0
        GROUP BY refund.order_id) AS co
    </select>

    <select id="selectCancelOrderList" resultMap="BaseResultMap">
        SELECT  refund.order_id as order_id,refund.eat_time as eat_time,refund.order_amount as order_amount_all,refund.status as status,
        refund.pick_type as pick_type, CASE refund.pick_type WHEN 1 THEN '早餐' WHEN 2 THEN '午餐' WHEN 3 THEN '晚餐' END as pick_name,
        refund.pay_type as pay_type, item.id as itemId,item.quantity as quantity,item.order_amount as order_amount,r.id as rid,r.recipe_id as recipeId,
        r.imageurl as imageurl,r.recipe_name as recipe_name from
        (SELECT *FROM t_recipe_order_cancel  WHERE associator_id= #{associator.associatorId,jdbcType=VARCHAR}  AND  status!=0 limit #{offSet},#{pageSize})
        as refund INNER JOIN t_recipe_order_items as item on item.order_id=refund.order_id INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        ORDER BY refund.eat_time DESC ,refund.create_time DESC
    </select>

    <select id="selectOverOrderListCount" resultType="java.lang.Integer" parameterType="com.lswd.youpin.model.Associator">
        SELECT COUNT(co.id) from (  SELECT o.id as id from t_recipe_order_over as o
        INNER JOIN t_recipe_order_items as item on item.order_id=o.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        WHERE  o.associator_id= #{associatorId,jdbcType=VARCHAR} AND  o.status=3
        GROUP BY o.order_id ) AS co
    </select>

    <select id="selectOverOrderList" resultMap="BaseResultMap">
        SELECT o.order_id as order_id,o.eat_time as eat_time,o.order_amount as order_amount_all,o.status as status,o.pay_type as pay_type,
        o.pick_type as pick_type, CASE o.pick_type WHEN 1 THEN '早餐' WHEN 2 THEN '午餐' WHEN 3 THEN '晚餐' END as pick_name,
        item.id as itemId,item.quantity as quantity,item.order_amount as order_amount,r.id as rid,r.recipe_id as recipeId,
        r.imageurl as imageurl,r.recipe_name as recipe_name from
        (select * from t_recipe_order_over  WHERE associator_id= #{associator.associatorId,jdbcType=VARCHAR} AND  status=3 limit #{offSet},#{pageSize}) as o
        INNER JOIN t_recipe_order_items as item on item.order_id=o.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        ORDER BY o.eat_time DESC ,o.create_time DESC

    </select>

    <select id="selectEvaluateOrderListCount" resultType="java.lang.Integer" parameterType="com.lswd.youpin.model.Associator">
        SELECT COUNT(co.id) from (  SELECT o.id as id from t_recipe_order_over as o
        INNER JOIN t_recipe_order_items as item on item.order_id=o.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        WHERE  o.associator_id= #{associatorId,jdbcType=VARCHAR} AND  o.status=6
        GROUP BY o.order_id ) AS co
    </select>

    <select id="selectEvaluateOrderList" resultMap="BaseResultMap">
        SELECT o.order_id as order_id,o.eat_time as eat_time,o.order_amount as order_amount_all,o.status as status,o.pay_type as pay_type,
        o.pick_type as pick_type,CASE o.pick_type WHEN 1 THEN '早餐' WHEN 2 THEN '午餐' WHEN 3 THEN '晚餐' END as pick_name,
        item.id as itemId,item.quantity as quantity,item.order_amount as order_amount,r.id as rid,r.recipe_id as recipeId,
        r.imageurl as imageurl,r.recipe_name as recipe_name from
        (select * from t_recipe_order_over WHERE associator_id= #{associator.associatorId,jdbcType=VARCHAR} AND  status=6
         limit #{offSet},#{pageSize}) as o
        INNER JOIN t_recipe_order_items as item on item.order_id=o.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        ORDER BY o.eat_time DESC ,o.create_time DESC
    </select>

    <select id="selectPaidOrderListCount" resultType="java.lang.Integer" parameterType="com.lswd.youpin.model.Associator">
        SELECT COUNT(co.id) from (SELECT paid.id as id from t_recipe_order_paid as paid
        INNER JOIN t_recipe_order_items as item on item.order_id=paid.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        WHERE  paid.associator_id= #{associatorId,jdbcType=VARCHAR}
        GROUP BY paid.order_id ) AS co
    </select>

    <select id="selectPaidOrderList" resultMap="BaseResultMap">
        SELECT  paid.order_id as order_id,paid.eat_time as eat_time,paid.order_amount as order_amount_all,paid.status as status,
        paid.pick_type as pick_type,CASE paid.pick_type WHEN 1 THEN '早餐' WHEN 2 THEN '午餐' WHEN 3 THEN '晚餐' END as pick_name,
        paid.pay_type as pay_type, item.id as itemId,item.quantity as quantity,item.order_amount as order_amount,
        r.id as rid,r.recipe_id as recipeId, r.imageurl as imageurl,r.recipe_name as recipe_name from
        (select * from t_recipe_order_paid  WHERE  associator_id= #{associator.associatorId,jdbcType=VARCHAR} limit #{offSet},#{pageSize}) as paid
        INNER JOIN t_recipe_order_items as item on item.order_id=paid.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        ORDER BY paid.eat_time DESC ,paid.create_time DESC
    </select>


    <select id="selectOrderListCount" resultType="java.lang.Integer" parameterType="com.lswd.youpin.model.Associator">
        SELECT COUNT(co.order_id) from (SELECT ro.order_id as order_id from recipeOrderAll as ro
        INNER JOIN t_recipe_order_items as item on item.order_id=ro.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        WHERE  ro.associator_id= #{associatorId,jdbcType=VARCHAR} AND  ro.status=3
        GROUP BY ro.order_id)as co
    </select>

    <select id="selectOrderList" resultMap="BaseResultMap">
        SELECT  ro.order_id as order_id,ro.eat_time as eat_time,ro.order_amount as order_amount_all,ro.status as status,
        ro.pick_type as pick_type,CASE ro.pick_type WHEN 1 THEN '早餐' WHEN 2 THEN '午餐' WHEN 3 THEN '晚餐' END as pick_name,
        item.id as itemId,item.quantity as quantity,item.order_amount as order_amount,r.id as rid,r.recipe_id as recipeId,
        r.imageurl as imageurl,r.recipe_name as recipe_name from
        (SELECT  *from recipeOrderAll  WHERE  associator_id= #{associator.associatorId,jdbcType=VARCHAR} AND  ro.status=!0 limit #{offSet},#{pageSize}) as ro
        INNER JOIN t_recipe_order_items as item on item.order_id=ro.order_id
        INNER JOIN t_recipe as r ON r.recipe_id=item.recipe_id
        ORDER BY ro.eat_time DESC ,ro.create_time DESC
    </select>

    <delete id="deleteOrderByOrderId">
        DELETE FROM  t_recipe_order_tmp WHERE  order_id=#{orderId,jdbcType=VARCHAR}
    </delete>

    <insert id="insertCancelOrder">
      INSERT  INTO  t_recipe_order_cancel (order_id,associator_id,eat_time,pick_type ,
        order_amount,pay_type,canteen_id,status,create_time,update_time)
        VALUES (#{recipeOrder.orderId,jdbcType=VARCHAR}, #{associator.associatorId,jdbcType=VARCHAR},
        #{recipeOrder.eatTime,jdbcType=TIMESTAMP},#{recipeOrder.pickType,jdbcType=INTEGER}, #{recipeOrder.orderAmount,jdbcType=DOUBLE},
        #{recipeOrder.payType,jdbcType=BIT}, #{recipeOrder.canteenId,jdbcType=VARCHAR},
        #{recipeOrder.status,jdbcType=SMALLINT},#{recipeOrder.createTime,jdbcType=TIMESTAMP},
        #{recipeOrder.updateTime,jdbcType=TIMESTAMP})
    </insert>

    <select id="getOrderListWxAll" resultMap="BaseResultMap">
        select o.eat_time as eat_time,o.order_id as order_id,o.canteen_id as canteen_id,o.order_amount as order_amount_all,o.status as status,r.imageurl as imageurl,
        r.recipe_name as recipe_name,item.order_amount as order_amount,item.quantity as quantity,item.decription as decription,o.pick_type as pick_type,
        o.pay_type as pay_type,CASE o.pay_type WHEN 0 THEN '未支付' when 1 then '微信支付' WHEN 2 then
        '支付宝支付' when 3 then '卡支付' end as pay from (select* from recipeOrderAll where 1=1 AND
        <foreach collection="canteenIds" item="can"  separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>) as o INNER JOIN
        t_recipe_order_items as item ON o.order_id=item.order_id INNER JOIN t_recipe as r on r.recipe_id=item.recipe_id
        where o.eat_time between #{startDate} and #{endDate} ORDER BY o.eat_time DESC ,o.create_time DESC limit #{offSet},#{pageSize}
    </select>

    <select id="getOrderListWxRefund" resultMap="BaseResultMap">
        select o.eat_time as eat_time,o.order_id as order_id,o.canteen_id as canteen_id,o.order_amount as order_amount_all,o.status as status,r.imageurl as imageurl,
        r.recipe_name as recipe_name,item.order_amount as order_amount,item.quantity as quantity,item.decription as decription,o.pick_type as pick_type,
        o.pay_type as pay_type,CASE o.pay_type WHEN 0 THEN '未支付' when 1 then '微信支付' WHEN 2 then
        '支付宝支付' when 3 then '卡支付' end as pay from (select* from recipeOrderExit where 1=1 AND
        <foreach collection="canteenIds" item="can"  separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>) as o INNER JOIN
        t_recipe_order_items as item ON o.order_id=item.order_id INNER JOIN t_recipe as r on r.recipe_id=item.recipe_id
        where o.eat_time between #{startDate} and #{endDate}  ORDER BY o.eat_time DESC ,o.create_time DESC limit #{offSet},#{pageSize}
    </select>

    <select id="getOrderListWxOver" resultMap="BaseResultMap">
        select o.eat_time as eat_time,o.order_id as order_id,o.canteen_id as canteen_id,o.order_amount as order_amount_all,o.status as status,r.imageurl as imageurl,
        r.recipe_name as recipe_name,item.order_amount as order_amount,item.quantity as quantity,item.decription as decription,o.pick_type as pick_type,
        o.pay_type as pay_type,CASE o.pay_type WHEN 0 THEN '未支付' when 1 then '微信支付' WHEN 2 then
        '支付宝支付' when 3 then '卡支付' end as pay from (select* from t_recipe_order_over where 1=1 AND
        <foreach collection="canteenIds" item="can"  separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>) as o INNER JOIN
        t_recipe_order_items as item ON o.order_id=item.order_id INNER JOIN t_recipe as r on r.recipe_id=item.recipe_id
        where o.eat_time between #{startDate} and #{endDate}  ORDER BY o.eat_time DESC ,o.create_time DESC limit #{offSet},#{pageSize}
    </select>

    <select id="getOrderListWxPaid" resultMap="BaseResultMap">
        select o.eat_time as eat_time,o.order_id as order_id,o.canteen_id as canteen_id,o.order_amount as order_amount_all,o.status as status,r.imageurl as imageurl,
        r.recipe_name as recipe_name,item.order_amount as order_amount,item.quantity as quantity,item.decription as decription,o.pick_type as pick_type,
        o.pay_type as pay_type,CASE o.pay_type WHEN 0 THEN '未支付' when 1 then '微信支付' WHEN 2 then
        '支付宝支付' when 3 then '卡支付' end as pay from (select* from t_recipe_order_paid where 1=1 AND
        <foreach collection="canteenIds" item="can"  separator="OR" open="(" close=")">
           canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>) as o INNER JOIN
        t_recipe_order_items as item ON o.order_id=item.order_id INNER JOIN t_recipe as r on r.recipe_id=item.recipe_id
        where o.eat_time between #{startDate} and #{endDate} ORDER BY o.eat_time DESC ,o.create_time DESC limit #{offSet},#{pageSize}
    </select>

    <select id="getOrderListWxTmp" resultMap="BaseResultMap">
        select o.eat_time as eat_time,o.order_id as order_id,o.canteen_id as canteen_id,o.order_amount as order_amount_all,o.status as status,r.imageurl as imageurl,
        r.recipe_name as recipe_name,item.order_amount as order_amount,item.quantity as quantity,item.decription as decription,o.pick_type as pick_type,
        o.pay_type as pay_type,CASE o.pay_type WHEN 0 THEN '未支付' when 1 then '微信支付' WHEN 2 then
        '支付宝支付' when 3 then '卡支付' end as pay from (select* from t_recipe_order_tmp where 1=1 AND
        <foreach collection="canteenIds" item="can"  separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>) as o INNER JOIN
        t_recipe_order_items as item ON o.order_id=item.order_id INNER JOIN t_recipe as r on r.recipe_id=item.recipe_id
        where o.eat_time between #{startDate} and #{endDate} ORDER BY o.eat_time DESC ,o.create_time DESC limit #{offSet},#{pageSize}
    </select>

    <select id="getOrderListWxAllCount" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT co.order_id) FROM ( select o.order_id as order_id from (
        select * from recipeOrderAll where 1=1 AND
        <foreach collection="canteenIds" item="can"  separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        ) as o
        INNER JOIN t_recipe_order_items as item ON o.order_id=item.order_id INNER JOIN t_recipe as r on r.recipe_id=item.recipe_id
       WHERE o.eat_time between #{startDate} and #{endDate}
        ) as co
    </select>

    <select id="getOrderListWxRefundCount" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT co.order_id) FROM ( select o.order_id as order_id from (
        select * from recipeOrderExit where 1=1 AND
        <foreach collection="canteenIds" item="can"  separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        ) as o
        INNER JOIN t_recipe_order_items as item ON o.order_id=item.order_id INNER JOIN t_recipe as r on r.recipe_id=item.recipe_id
        WHERE o.eat_time between #{startDate} and #{endDate}
        ) as co
    </select>

    <select id="getOrderListWxOverCount" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT co.order_id) FROM ( select o.order_id as order_id from (
        select * from t_recipe_order_over where 1=1 AND
        <foreach collection="canteenIds" item="can"  separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        ) as o
        INNER JOIN t_recipe_order_items as item ON o.order_id=item.order_id INNER JOIN t_recipe as r on r.recipe_id=item.recipe_id
        WHERE o.eat_time between #{startDate} and #{endDate}
        ) as co
    </select>

    <select id="getOrderListWxPaidCount" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT co.order_id) FROM ( select o.order_id as order_id from (
        select * from t_recipe_order_paid where 1=1 AND
        <foreach collection="canteenIds" item="can"  separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        ) as o
        INNER JOIN t_recipe_order_items as item ON o.order_id=item.order_id INNER JOIN t_recipe as r on r.recipe_id=item.recipe_id
        WHERE o.eat_time between #{startDate} and #{endDate}
        ) as co
    </select>

    <select id="getOrderListWxTmpCount" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT co.order_id) FROM ( select o.order_id as order_id from (
        select * from t_recipe_order_tmp where 1=1 AND
        <foreach collection="canteenIds" item="can"  separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        ) as o
        INNER JOIN t_recipe_order_items as item ON o.order_id=item.order_id INNER JOIN t_recipe as r on r.recipe_id=item.recipe_id
        WHERE o.eat_time between #{startDate} and #{endDate}
        ) as co
    </select>





    <!--start  zhenguanqi Write-->
    <select id="getOrderInPaidByOrderId" resultMap="BaseResultMap">
        select paid.*,paid.order_amount order_amount_all,CASE paid.pay_type WHEN 0 THEN '未支付' when 1 then '微信支付' WHEN 2 then
        '支付宝支付' when 3 then '卡支付' end as payTypeName from t_recipe_order_paid paid
        where order_id = #{recipeOrderId}
    </select>

    <select id="getOrderInOverByOrderId" resultMap="BaseResultMap">
        select over.*,over.order_amount order_amount_all,CASE over.pay_type WHEN 0 THEN '未支付' when 1 then '微信支付' WHEN 2 then
        '支付宝支付' when 3 then '卡支付' end as payTypeName from t_recipe_order_over over
        where order_id = #{recipeOrderId}
    </select>

    <delete id="deleteOrderInPaidByOrderIdTrue" parameterType="java.lang.String">
        delete from t_recipe_order_paid  where order_id =#{recipeOrderId,jdbcType=VARCHAR}
    </delete>

    <insert id="insertOrderInOver" parameterType="com.lswd.youpin.model.lsyp.RecipeOrder">
        insert into t_recipe_order_over (order_id,associator_id,eat_time,pick_type,
        order_amount,pay_type,canteen_id,description,create_time,update_time,unified_id,status)
        values ( #{orderId,jdbcType=VARCHAR}, #{associatorId,jdbcType=VARCHAR},
        #{eatTime,jdbcType=TIMESTAMP},#{pickType,jdbcType=INTEGER}, #{orderAmount,jdbcType=DOUBLE},#{payType,jdbcType=BIT}, #{canteenId,jdbcType=VARCHAR},
        #{description,jdbcType=VARCHAR},#{createTime,jdbcType=TIMESTAMP},#{updateTime,jdbcType=TIMESTAMP},#{unifiedId,jdbcType=INTEGER},#{status,jdbcType=SMALLINT})
    </insert>
    <!--end  zhenguanqi Write-->


    <select id="selectOrderByOrderId" resultMap="BaseResultMap">
        select order_id, `status` from recipeOrderAll WHERE order_id=#{orderId,jdbcType=VARCHAR}
    </select>

    <update id="updateStatus">
        update t_recipe_order_over SET status=6 WHERE order_id=#{orderId,jdbcType=VARCHAR}
    </update>
    <update id="deleteStatus" parameterType="com.lswd.youpin.model.lsyp.RecipeOrder">
        update ${table}
        SET status=0,
        update_time=#{recipeOrder.updateTime,jdbcType=TIMESTAMP}
        WHERE order_id=#{recipeOrder.orderId,jdbcType=VARCHAR}
    </update>

    <select id="payOrder" resultMap="BaseResultMap">
        select id,order_id,canteen_id,pick_type,associator_id,eat_time,
        order_amount as order_amount_all,`status`,pay_type,create_time,update_time
        from t_recipe_order_over where eat_time BETWEEN #{startDate,jdbcType=TIMESTAMP}
        and  #{endDate,jdbcType=TIMESTAMP} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
    </select>
    <insert id="insertOrderRefund" parameterType="com.lswd.youpin.model.lsyp.RecipeOrder">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into t_recipe_order_refund (order_id,canteen_id,associator_id,pick_type,eat_time,
        order_amount,status,pay_type,description,create_time,update_time,unified_id)
        values ( #{orderId,jdbcType=VARCHAR}, #{canteenId,jdbcType=VARCHAR},#{associatorId,jdbcType=VARCHAR},#{pickType,jdbcType=INTEGER},
        #{eatTime,jdbcType=TIMESTAMP}, #{orderAmount,jdbcType=DOUBLE},#{status,jdbcType=SMALLINT},#{payType,jdbcType=SMALLINT},
        #{description,jdbcType=VARCHAR},#{createTime,jdbcType=TIMESTAMP},#{updateTime,jdbcType=TIMESTAMP},#{unifiedId,jdbcType=INTEGER}
        )
    </insert>

    <select id="getMoneyPaidAll" resultType="java.lang.Float">
        select SUM(order_amount) from t_recipe_order_paid
        where eat_time BETWEEN #{startDate,jdbcType=VARCHAR}
        and #{endDate,jdbcType=VARCHAR} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
    </select>


</mapper>