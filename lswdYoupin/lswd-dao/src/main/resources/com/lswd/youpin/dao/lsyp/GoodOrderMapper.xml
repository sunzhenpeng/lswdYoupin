<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lswd.youpin.dao.lsyp.GoodOrderMapper">
    <resultMap id="BaseResultMap" type="com.lswd.youpin.model.lsyp.GoodOrder">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="order_id" jdbcType="VARCHAR" property="orderId"/>
        <result column="associator_id" jdbcType="VARCHAR" property="associatorId"/>
        <result column="picking_time" jdbcType="TIMESTAMP" property="pickingTime"/>
        <result column="order_amount" jdbcType="REAL" property="orderAmount"/>
        <result column="status" jdbcType="SMALLINT" property="status"/>
        <result column="canteen_id" jdbcType="VARCHAR" property="canteenId"/>
        <result column="pay_type" jdbcType="SMALLINT" property="payType"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="unified_id" jdbcType="INTEGER" property="unifiedId"/>
        <result column="safetytwo" jdbcType="VARCHAR" property="safetytwo"/>
        <result column="safetythree" jdbcType="VARCHAR" property="safetythree"/>
    </resultMap>

    <resultMap id="goodPaidMap" type="com.lswd.youpin.model.lsyp.GoodStatisticsOrder">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="canteen_id" jdbcType="VARCHAR" property="canteenId"/>
        <result column="good_id" jdbcType="VARCHAR" property="goodId"/>
        <result column="quantity" jdbcType="INTEGER" property="quantity"/>
        <result column="imageurl" jdbcType="VARCHAR" property="imageurl"/>
        <result column="price" jdbcType="REAL" property="price"/>
        <result column="unit" jdbcType="VARCHAR" property="unit"/>
    </resultMap>

    <sql id="Base_Column_List">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        id, order_id, associator_id, picking_time, order_amount, status,canteen_id,pay_type, description, create_time,
        update_time, unified_id, safetytwo, safetythree
    </sql>

    <insert id="insertGoodOrder" parameterType="com.lswd.youpin.model.lsyp.GoodOrder">
    insert into ${table} (order_id, associator_id,
    picking_time, order_amount, status, canteen_id,pay_type,
    description, create_time, update_time,unified_id
    )
    values (#{goodOrder.orderId,jdbcType=VARCHAR}, #{goodOrder.associatorId,jdbcType=VARCHAR},
    #{goodOrder.pickingTime,jdbcType=TIMESTAMP}, #{goodOrder.orderAmount,jdbcType=REAL}, #{goodOrder.status,jdbcType=SMALLINT},
    #{goodOrder.canteenId,jdbcType=VARCHAR}, #{goodOrder.payType,jdbcType=SMALLINT},
    #{goodOrder.description,jdbcType=VARCHAR}, #{goodOrder.createTime,jdbcType=TIMESTAMP}, #{goodOrder.updateTime,jdbcType=TIMESTAMP},
     #{goodOrder.unifiedId,jdbcType=INTEGER})
  </insert>

    <insert id="insertGoodOrderTmp" parameterType="com.lswd.youpin.model.lsyp.GoodOrder">
    insert into ${table} (order_id, associator_id,
    picking_time, order_amount, status, canteen_id,
    description, create_time, update_time,unified_id,out_fee
    )
    values (#{goodOrder.orderId,jdbcType=VARCHAR}, #{goodOrder.associatorId,jdbcType=VARCHAR},
    #{goodOrder.pickingTime,jdbcType=TIMESTAMP}, #{goodOrder.orderAmount,jdbcType=REAL}, #{goodOrder.status,jdbcType=SMALLINT},
    #{goodOrder.canteenId,jdbcType=VARCHAR},
    #{goodOrder.description,jdbcType=VARCHAR}, #{goodOrder.createTime,jdbcType=TIMESTAMP}, #{goodOrder.updateTime,jdbcType=TIMESTAMP},
        #{goodOrder.unifiedId,jdbcType=INTEGER},#{goodOrder.outFee,jdbcType=DOUBLE})
  </insert>

    <select id="getGoodOrderByGoodOrderId" resultMap="BaseResultMap">
      SELECT id, order_id, associator_id, picking_time, order_amount, status,canteen_id,pay_type, description, create_time,update_time,unified_id,
        CASE pay_type WHEN 0 THEN '未支付' WHEN 1 then '微信支付' when 2 then '支付宝支付' when 3 then '餐卡支付' end AS payTypeName
      FROM ${table} WHERE 1=1  and order_id = #{goodOrderId}
    </select>

    <!--下面这两个方法是用来在web端，数据列表展示的-->
    <select id="getCount" resultType="java.lang.Integer">
        SELECT count(1) FROM ${table} WHERE 1=1
        <if test="keyword != ''">
            and order_id LIKE #{keyword}
        </if>
        <if test="associatorId != ''">
            and associator_id = #{associatorId}
        </if>
        <if test="canteenId != ''">
            and canteen_id = #{canteenId}
        </if>
        <if test="canteenId == '' and canIds != null">
            AND canteen_id in
            <foreach item="item" index="index" collection="canIds" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="dateflag != null">
            AND date(create_time) >= DATE_SUB(CURDATE(), INTERVAL #{dateflag} DAY)
        </if>
        <if test="orderTime != ''">
            AND DATE_FORMAT(picking_time, "%Y-%m-%d") = #{orderTime}
        </if>
        <if test="payType != null">
            AND pay_type = #{payType}
        </if>
    </select>

    <select id="getList" resultMap="BaseResultMap">
        SELECT order_id,associator_id,picking_time,order_amount,canteen_id,description,create_time,status,
        CASE pay_type WHEN 0 THEN '未支付' WHEN 1 then '微信支付' when 2 then '支付宝支付' when 3 then '餐卡支付' end AS payTypeName
        from ${table} WHERE 1=1
        <if test="keyword != ''">
            and order_id LIKE #{keyword}
        </if>
        <if test="associatorId != ''">
            and associator_id = #{associatorId}
        </if>
        <if test="canteenId != ''">
            and canteen_id = #{canteenId}
        </if>
        <if test="canteenId == '' and canIds != null">
            AND canteen_id in
            <foreach item="item" index="index" collection="canIds" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="dateflag != null">
            AND date(create_time) >= DATE_SUB(CURDATE(), INTERVAL #{dateflag} DAY)
        </if>
        <if test="orderTime != ''">
            AND DATE_FORMAT(picking_time, "%Y-%m-%d") = #{orderTime}
        </if>
        <if test="payType != null">
            AND pay_type = #{payType}
        </if>
        ORDER BY picking_time DESC,create_time DESC
        limit #{offset},#{pageSize}
    </select>

    <!--下面这两个方法是用来在H5端，数据列表展示的-->
    <select id="getCountH5" resultType="java.lang.Integer">
        SELECT count(1) FROM ${table} WHERE 1=1 AND status != 0 AND status = #{status}
        <if test="associatorId != ''">
            and associator_id = #{associatorId}
        </if>
        <if test="canteenId != ''">
            and canteen_id = #{canteenId}
        </if>
    </select>

    <select id="getListH5" resultMap="BaseResultMap">
        SELECT order_id,associator_id,picking_time,order_amount,canteen_id,description,create_time,status,
        CASE pay_type WHEN 0 THEN '未支付' WHEN 1 then '微信支付' when 2 then '支付宝支付' when 3 then '餐卡支付' end AS payTypeName
        from ${table} WHERE 1=1 AND status != 0 AND status = #{status}
        <if test="associatorId != ''">
            and associator_id = #{associatorId}
        </if>
        <if test="canteenId != ''">
            and canteen_id = #{canteenId}
        </if>
        ORDER BY picking_time DESC,create_time DESC
        limit #{offset},#{pageSize}
    </select>

    <delete id="deleteByPrimaryId" parameterType="java.lang.Integer">
        delete from ${table}  where id = #{id,jdbcType=INTEGER}
     </delete>

    <!--真删除-->
    <delete id="deleteGoodOrderByGoodOrderIdTrue" parameterType="java.lang.String">
    delete from ${table} where order_id = #{goodOrderId}
  </delete>

    <!--修改状态-->
    <update id="deleteGoodOrderByGoodOrderId" parameterType="java.lang.String">
      update ${table} SET status = #{status} WHERE order_id=#{goodOrderId,jdbcType=VARCHAR}
    </update>

    <update id="updateGoodOrderStatus">
    UPDATE ${table} SET status = 1,update_time = #{goodOrder.updateTime}
    where order_id =#{goodOrder.orderId,jdbcType=VARCHAR}
  </update>

    <select id="selectGoodPaidAllList" resultMap="BaseResultMap">
    SELECT * FROM t_good_order_paid  where picking_time=#{date,jdbcType=TIMESTAMP}
  </select>

    <select id="selectOrderTmpLast" resultType="java.lang.Integer">
     select id from t_good_order_tmp GROUP BY id DESC LIMIT 0,1
  </select>

    <select id="getSalesList" resultMap="BaseResultMap">
        select * from t_good_order_over where picking_time BETWEEN #{startTime,jdbcType=TIMESTAMP}
        and #{endTime,jdbcType=TIMESTAMP} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>

    </select>

    <select id="getSalesRefundList" resultMap="BaseResultMap">
        select * from t_good_order_refund where picking_time BETWEEN #{startTime,jdbcType=TIMESTAMP}
        and #{endTime,jdbcType=TIMESTAMP} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="getGoodPaidList" resultMap="goodPaidMap">
        SELECT  o.canteen_id as canteen_id,g.id as id,g.good_id as good_id, SUM(t.quantity) as quantity,g.good_name as name,g.standard as
        description,g.imageurl as
        imageurl ,g.price as price,g.unit as unit
        from t_good_order_paid as o INNER JOIN t_good_order_items as t on o.order_id=t.order_id
        INNER JOIN t_good as g on g.good_id=t.good_id where o.picking_time
        BETWEEN #{startTime,jdbcType=TIMESTAMP} and #{endTime,jdbcType=TIMESTAMP} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            o.canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        GROUP BY g.good_id limit #{offSet},#{pageSize}
    </select>

    <select id="getDanPin" resultMap="BaseResultMap">
        SELECT order_id,associator_id,picking_time,order_amount,canteen_id,description,create_time,status from t_good_order_over
        where picking_time BETWEEN #{startTime,jdbcType=TIMESTAMP} and #{endTime,jdbcType=TIMESTAMP} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>

        <!--select SUM(it.quantity) AS 'value',g.good_name as 'name'-->
        <!--from t_good_order_over as o INNER JOIN t_good_order_items as it on-->
        <!--it.order_id=o.order_id INNER JOIN t_good as g ON g.good_id=it.good_id-->
        <!--where picking_time BETWEEN #{startTime,jdbcType=TIMESTAMP} and #{endTime,jdbcType=TIMESTAMP} AND-->
        <!--<foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">-->
            <!--o.canteen_id=#{can,jdbcType=VARCHAR}-->
        <!--</foreach>-->
        <!--GROUP BY it.good_id-->
    </select>

    <select id="getGoodPaidCount" resultType="java.lang.Integer">
        SELECT COUNT(s.id) from (SELECT g.id as id from t_good_order_paid as o
        INNER JOIN t_good_order_items as t on o.order_id=t.order_id INNER JOIN t_good as g on g.good_id=t.good_id where
        o.picking_time
        BETWEEN #{startTime,jdbcType=TIMESTAMP} and #{endTime,jdbcType=TIMESTAMP} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            o.canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
        GROUP BY g.good_id ) as s
    </select>

    <!--获取某个商品的月销量-->
    <select id="getGoodMonthSales" resultType="java.lang.Integer">
    SELECT sum(item.quantity) from t_good_order_over over INNER JOIN t_good_order_items item ON over.order_id = item.order_id
    WHERE over.canteen_id = #{canteenId} AND item.good_id = #{goodId} AND date(create_time) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
  </select>

    <select id="getSalesOrderCount" resultType="java.lang.Integer">
    SELECT COUNT(id) from t_good_order_over  where picking_time BETWEEN #{startTime,jdbcType=TIMESTAMP}
     and  #{endTime,jdbcType=TIMESTAMP} and canteen_id = #{canteenId,jdbcType=VARCHAR}
  </select>

    <select id="getTimeOrder" resultType="java.lang.Integer">
        SELECT COUNT(id) from t_good_order_over where picking_time LIKE #{dateTime,jdbcType=VARCHAR} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="getGoodOrder" parameterType="java.lang.String" resultMap="BaseResultMap">
     SELECT *
     FROM ${table}
     WHERE order_id =#{orderNo,jdbcType=VARCHAR}
  </select>

    <update id="updateStatus">
        update t_good_order_over SET status=6 WHERE order_id=#{orderId,jdbcType=VARCHAR}
    </update>

    <select id="payOrder" resultMap="BaseResultMap">
        select * from t_good_order_over
        where picking_time BETWEEN #{startDate,jdbcType=TIMESTAMP}
        and #{endDate,jdbcType=TIMESTAMP} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
    </select>
    <select id="getMoneyPaidAll" resultType="java.lang.Float">
        select SUM(order_amount) from t_good_order_paid
        where picking_time BETWEEN #{startDate,jdbcType=VARCHAR}
        and #{endDate,jdbcType=VARCHAR} AND
        <foreach collection="canteenIds" item="can" separator="OR" open="(" close=")">
            canteen_id=#{can,jdbcType=VARCHAR}
        </foreach>
    </select>

</mapper>